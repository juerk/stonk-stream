<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WuerkLive</title>

  <!-- HLS.js for video playback -->
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <!-- Solana Web3.js for wallet detection -->
  <script src="https://cdn.jsdelivr.net/npm/@solana/web3.js@latest/lib/index.iife.min.js"></script>

  <style>
    body { background: #111; color: #eee; font-family: sans-serif; margin: 0; padding: 1rem; position: relative; }
    #clearBtn { position: absolute; top: 1rem; right: 1rem; padding: 0.5rem 1rem; background: #800; color: #fff; border: none; cursor: pointer; }
    h1 { text-align: center; margin-top: 0; }

    #playerWrapper { position: relative; width: 80%; max-width: 800px; margin: 1rem auto; }
    video { width: 100%; border: 2px solid #444; }
    .ticker { position: absolute; top: 0; left: 0; width: 100%; background: rgba(0,0,0,0.6); overflow: hidden; height: 2rem; display: flex; align-items: center; pointer-events: none; }
    .ticker__content { display: inline-block; white-space: nowrap; padding-left: 100%; animation: scrollTicker 20s linear infinite; font-size: 1rem; color: #fff; }
    @keyframes scrollTicker { from { transform: translateX(0); } to { transform: translateX(-100%); } }

    /* View count overlay: whitish-grey background for contrast */
    #viewCount { position: absolute; bottom: 0.5rem; left: 0.5rem; background: rgba(255,255,255,0.7); color: #000; padding: 0.25rem 0.5rem; font-size: 0.9rem; border-radius: 3px; display: flex; align-items: center; }
    .viewer-icon { margin-right: 0.25rem; display: inline-block; width: 1em; height: 1em; fill: currentColor; }

    /* Volume and mute controls */
    #volumeControls { position: absolute; bottom: 0.5rem; right: 0.5rem; background: rgba(0,0,0,0.6); padding: 0.25rem 0.5rem; border-radius: 3px; display: flex; align-items: center; gap: 0.5rem; }
    #volumeSlider { cursor: pointer; }
    #muteBtn { background: none; border: none; color: #fff; cursor: pointer; font-size: 1rem; }

    #donateBtn, #connectWalletBtn, #setNameBtn, #sendMsgBtn { padding: 0.5rem 1rem; background: #444; color: #eee; border: none; cursor: pointer; }

    #chatContainer { width: 80%; max-width: 800px; margin: 1rem auto; text-align: left; }
    #chatLog { border: 1px solid #444; background: #222; color: #eee; padding: 1rem; height: 200px; overflow-y: auto; }
    .chat-name { color: #0f0; font-weight: bold; }
    #chatControls, #messageControls { display: flex; gap: 0.5rem; margin-top: 0.5rem; }
    #chatControls input, #messageControls input { flex: 1; padding: 0.5rem; border: 1px solid #444; background: #111; color: #eee; }
    input.name-set { color: #0f0 !important; }
  </style>
</head>
<body>
  <button id="clearBtn">Clear</button>
  <h1>ðŸŽ¥ Welcome to WuerkLive</h1>

  <div id="playerWrapper">
    <!-- No pause controls -->
    <video id="video" autoplay muted></video>
    <!-- View count with whitish-grey background for contrast -->
    <div id="viewCount">
      <svg class="viewer-icon" viewBox="0 0 24 24" style="color:#00BFFF;">
        <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0z" />
        <path d="M12 14a6 6 0 00-6 6h12a6 6 0 00-6-6z" />
      </svg>
      <span id="viewNum">0</span>
    </div>
    <!-- Volume slider and mute -->
    <div id="volumeControls">
      <button id="muteBtn">ðŸ”ˆ</button>
      <input type="range" id="volumeSlider" min="0" max="1" step="0.01" value="0.5">
    </div>
    <!-- Ticker -->
    <div class="ticker">
      <div class="ticker__content">
        ðŸ”´ Live now â€¢ Recent tips: ninjaSniper 0.001 SOL â€¢ BlockBuster 0.002 SOL â€¢ PhantomFlick 0.001 SOL â€¢ CryptoKid 0.001 SOL â€¢ SolFlare 0.001 SOL â€¢
      </div>
    </div>
  </div>

  <div style="margin:1rem 0; text-align:center;">
    <button id="donateBtn">ðŸ’– Donate 0.001 SOL</button>
  </div>
  <div style="margin:1rem 0; text-align:center;">
    <button id="connectWalletBtn" disabled>Connect Wallet</button>
    <span id="walletAddress" style="margin-left:0.5rem;"></span>
  </div>

  <div id="chatContainer">
    <div id="chatLog"></div>
    <div id="chatControls">
      <input type="text" id="nameInput" placeholder="Enter your name">
      <button id="setNameBtn">Set Name</button>
    </div>
    <div id="messageControls">
      <input type="text" id="messageInput" placeholder="Type your message...">
      <button id="sendMsgBtn">Send</button>
    </div>
  </div>

  <script>
    // Clear for convenience
    document.getElementById('clearBtn').addEventListener('click', () => {
      localStorage.clear();
      document.getElementById('chatLog').innerHTML = '';
      location.reload();
    });

    // HLS.js playback over HTTPS
    const video = document.getElementById('video');
    if (Hls.isSupported()) {
      const hls = new Hls();
      hls.loadSource('https://stonk.stream/hls/mystream.m3u8');
      hls.attachMedia(video);
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
      video.src = 'https://stonk.stream/hls/mystream.m3u8';
    }

    // Volume and mute logic
    const volumeSlider = document.getElementById('volumeSlider');
    const muteBtn = document.getElementById('muteBtn');
    video.volume = 0.5;
    volumeSlider.value = 0.5;
    volumeSlider.addEventListener('input', e => {
      video.volume = e.target.value;
      video.muted = false;
      updateMuteIcon();
    });
    muteBtn.addEventListener('click', () => {
      video.muted = !video.muted;
      updateMuteIcon();
    });
    function updateMuteIcon() { muteBtn.textContent = video.muted ? 'ðŸ”‡' : 'ðŸ”ˆ'; }
    updateMuteIcon();

    // View count updater (polls Nginx RTMP stats)
    async function updateViewCount() {
      try {
        const res = await fetch('/stat');
        const xml = await res.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(xml, 'application/xml');
        let raw = doc.querySelector('nclients')?.textContent;
        let num = parseInt(raw, 10) || 0;
        if (num < 1) num = 1;
        document.getElementById('viewNum').textContent = num;
      } catch (e) {
        console.warn('View count update failed', e);
      }
    }
    setInterval(updateViewCount, 5000);
    updateViewCount();

    // Phantom wallet connect
    const connectBtn = document.getElementById('connectWalletBtn');
    const addrSpan = document.getElementById('walletAddress');
    let provider;
    window.addEventListener('load', () => {
      if (window.solana && window.solana.isPhantom) {
        provider = window.solana;
        connectBtn.disabled = false;
        provider.on('connect', () => { addrSpan.textContent = provider.publicKey.toString(); connectBtn.textContent = 'Wallet Connected'; });
        provider.on('disconnect', () => { addrSpan.textContent = ''; connectBtn.textContent = 'Connect Wallet'; });
      } else {
        connectBtn.textContent = 'Install Phantom';
        connectBtn.onclick = () => window.open('https://phantom.app/', '_blank');
      }
    });
    connectBtn.addEventListener('click', async () => { try { await provider.connect(); } catch (err) { console.error(err); alert('Connection failed'); } });

    // Donation logic via Solana Pay URI
    const SOL_ADDRESS = 'AYF3CDFiMSvHB64sYebisCeiYujnm6vw2hnQ1siTPLkx';
    document.getElementById('donateBtn').addEventListener('click', () => {
      const amount = 0.001;
      const reference = crypto.randomUUID();
      const solanaUrl = `solana:${SOL_ADDRESS}?amount=${amount}&reference=${reference}`;
      const a = document.createElement('a'); a.href = solanaUrl; document.body.appendChild(a); a.click(); document.body.removeChild(a);
    });

    // Chat functionality
    const nameInput = document.getElementById('nameInput');
    const setNameBtn = document.getElementById('setNameBtn');
    const chatLog = document.getElementById('chatLog');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendMsgBtn');
    let username = localStorage.getItem('username');
    if (username) { nameInput.value = username; nameInput.disabled = true; setNameBtn.disabled = true; nameInput.classList.add('name-set'); messageInput.focus(); }
    setNameBtn.addEventListener('click', () => { const val = nameInput.value.trim(); if (!val) return alert('Please enter a name'); username = val; localStorage.setItem('username', username); nameInput.disabled = true; setNameBtn.disabled = true; nameInput.classList.add('name-set'); messageInput.focus(); });
    nameInput.addEventListener('keypress', e => { if (e.key === 'Enter') setNameBtn.click(); });
    function sendMessage() { if (!username) return alert('Please set your name first'); const msg = messageInput.value.trim(); if (!msg) return; const msgElem = document.createElement('div'); const nameElem = document.createElement('span'); nameElem.textContent = username + ': '; nameElem.classList.add('chat-name'); msgElem.appendChild(nameElem); msgElem.appendChild(document.createTextNode(msg)); chatLog.appendChild(msgElem); chatLog.scrollTop = chatLog.scrollHeight; messageInput.value = ''; }
    sendBtn.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', e => { if (e.key === 'Enter') sendMessage(); });
  </script>
</body>
</html>
